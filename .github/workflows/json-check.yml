---
name: Json Syntax Check
on:
  pull_request:

jobs:
  json-syntax-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkoutcode
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check changed file
        uses: dorny/paths-filter@v3
        with:
          filters: |
            json: "**/*/json"

      - name: Validate Json Syntax
        run: |
          git fetch origin main
          errors=0
          for file in $(git diff --name-only origin/main...HEAD -- '*.json') ; do
            if ! jq . "$file" >/dev/null 2>&1; then
              echo "Error in $file"
              jq empty "$file"
              ((errors++))
            fi
          done
          if ((errors)); then
            echo "$errors files had errors"
            exit 1
          fi
        shell: bash -l {0} -v

  json-key-value-check:
    runs-on: ubuntu-latest
    needs: json-syntax-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Key-Value Pair
        run: |
          check_documentation_file() {
            local file=$1
            # Get the main folder name (e.g., ACC_FOLDER)
            local main_folder=$(jq -r 'keys[]' "$file")
            # Get all job names in the main folder, ignoring the main folder itself
            local job_names=$(jq -r ".[\"$main_folder\"] | to_entries[] | select(.value.Type != \"SimpleFolder\") | .key" "$file")
            local errors=0
            for job in $job_names; do
              # Check if the job contains the DocumentationFile.FileName key
              if ! jq -e ".[\"$main_folder\"].[$job].DocumentationFile.FileName" "$file" >/dev/null; then
                echo "Job '$job' in file '$file' does not contain the 'DocumentationFile.FileName' key"
                ((errors++))
              fi
            done
            if ((errors)); then
              echo "$errors jobs had key-value pair errors in file '$file'"
              return 1
            else
              echo "All jobs have the 'DocumentationFile.FileName' key in file '$file'"
            fi
          }

          # Initialize errors counter
          errors=0
          # Loop through JSON files changed in the git diff
          for file in $(git diff --name-only origin/main...HEAD -- '*.json'); do
            if [[ -f "$file" ]]; then
              if ! check_documentation_file "$file"; then
                ((errors++))
              fi
            fi
          done

          if ((errors)); then
            echo "$errors JSON files had key-value pair errors"
            exit 1
          else
            echo "All JSON files are valid"
          fi
        shell: bash -l {0} -v

  # json-key-value-check:
  #   runs-on: ubuntu-latest
  #   needs: json-syntax-validation
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

      # - name: Validate Key-Value Pair
      #   run: |
      #     git fetch origin main
      #     errors=0

      #     check_documentation_file() {
      #       local file=$1

      #       # Find all job objects in the JSON file
      #       job_paths=$(jq -r 'paths | select(.[-1] == "DocumentationFile" and .[-2] | test("^(CTM)")) | map(tostring) | join(".")' "$file")

      #       if [ -z "$job_paths" ]; then
      #         echo "File $file does not contain any 'DocumentationFile.FileName' keys."
      #         ((errors++))
      #       else
      #         for path in $job_paths; do
      #           value=$(jq -r ".${path}.FileName // empty" "$file")
      #           if [ -z "$value" ]; then
      #             echo "Invalid or empty 'FileName' value at ${path}.FileName in $file"
      #             ((errors++))
      #           fi
      #         done
      #       fi

      #       # Ensure every job contains DocumentationFile.FileName key
      #       job_names=$(jq -r 'to_entries | map(select(.value.Type == "Job:Command")) | map(.key)[]' "$file")
      #       for job in $job_names; do
      #         if ! jq -e ".${job}.DocumentationFile.FileName // empty" "$file" >/dev/null 2>&1; then
      #           echo "Job '${job}' in file '$file' does not contain the 'DocumentationFile.FileName' key"
      #           ((errors++))
      #         fi
      #       done
      #     }

      #     for file in $(git diff --name-only origin/main...HEAD -- '*.json'); do
      #       check_documentation_file "$file"
      #     done

      #     if ((errors)); then
      #       echo "$errors files had key-value pair errors"
      #       exit 1
      #     fi
      #   shell: bash -l {0} -v

      # - name: Validate Key-Value Pair
      #   run: |
      #     git fetch origin main
      #     errors=0

      #     check_documentation_file() {
      #       local file=$1

      #       # Check for DocumentationFile.FileName in each object
      #       invalid_files=0

      #       # Use jq to get the paths of all DocumentationFile.FileName
      #       paths=$(jq -r 'paths | select(.[-1] == "FileName") | map(tostring) | join(".")' "$file")

      #       if [ -z "$paths" ]; then
      #         echo "File $file does not contain any 'DocumentationFile.FileName' keys."
      #         ((invalid_files++))
      #       else
      #         for path in $paths; do
      #           value=$(jq -r ".$path" "$file")
      #           if [ -z "$value" ] || [ "$value" == "null" ]; then
      #             echo "Invalid or empty 'FileName' value at $path in $file"
      #             ((invalid_files++))
      #           fi
      #         done
      #       fi

      #       if ((invalid_files)); then
      #         ((errors++))
      #       fi
      #     }

      #     for file in $(git diff --name-only origin/main...HEAD -- '*.json'); do
      #       check_documentation_file "$file"
      #     done

      #     if ((errors)); then
      #       echo "$errors files had key-value pair errors"
      #       exit 1
      #     fi
      #   shell: bash -l {0} -v      